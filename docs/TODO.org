* Immediate TODOs
** TODO Implement testing data
*** TODO Finish models.py to integrate donations
*** TODO Populate the testing data file
*** TODO Write function into test.app to use testing data
*** TODO Write setup function for app.py
*** TODO Write teardown function for app.py

* Sitemap
These are the pages we are gonna need, with the relevant data nested.

** TODO News Page [2/4]
- [X] HTML structured out
- [X] Data modeled
  - [X] News Items [5/5]
    - [X] Headline
    - [X] Author
    - [X] Datetime
    - [X] Body
    - [X] Slug
- [ ] HTML wired to database
- [ ] Code to generate written

** TODO About
- [X] HTML structured out

** TODO Home Page [0/3]
- [ ] Featured Gamer
- [ ] Featured Campaign
- [ ] Login-based automation
  - [ ] Promote
  - [ ] Ranking
  - [ ] Current Campaign / Progress
  - [ ] Edit Profile Widget

** TODO Search Page [0/1]
- [ ] Search For [0/3]
  - [ ] Gamers [0/1]
    - [ ] Search By [0/3]
      - [ ] Name
      - [ ] Region
      - [ ] Browse (sort by) [0/3] 
        - [ ] $ raised
        - [ ] Name A-Z
        - [ ] Date Joined
  - [ ] Teams [0/1]
    - [ ] Search By [0/3]
      - [ ] Name
      - [ ] Region
      - [ ] Browse (sort by) [0/3] 
        - [ ] $ raised
        - [ ] Name A-Z
        - [ ] Date Joined
  - [ ] Shelters [0/1]
    - [ ] Search By [0/3]
      - [ ] Name
      - [ ] Region
      - [ ] Browse (sort by) [0/3] 
        - [ ] $ raised
        - [ ] Name A-Z
        - [ ] Date Joined

** TODO Team Profile Page [0/3]
- [ ] Team stats
- [ ] Roster
- [ ] About

** TODO Gamer Profile Page [0/3]
- [ ] Gamer Stats
- [ ] About
- [ ] Donate

** TODO Campaign Page [0/1]
- [ ] 

* Data

** Player Data

** Donations Data

** Shelter Data

** Team Data
- [ ] Name
- [ ] Roster
- [ ] Date joined
- [ ] about
- [ ] 

** Campaign Data

*** goes in the campaign itself
- [ ] Name
- [ ] Date created
- [ ] Target
- [ ] End date
- [ ] Owner
  -- owner requires a little more thought.  
     If a player makes a campaign, how does that work? 
     If a team makes a campaign
     Are there going to be Global campaigns?
     Can shelters start a campaign?

*** from other modules
- [ ] $ raised (derived from donations)
- [ ] contributors (derived from donations / users)
- [ ] gamers (derived from ?)
- [ ] Highest earner (derived from donations)

* Actionable
These things are not immediately actionable and require a little more study before implementation.

** Page work
these pages need a little love

*** News :ben:
 - [ ] Wire up the news item block to be generated based on code 

*** Search 

**** Show rankings :ian:

**** Show money raised :ian:
  - [ ] Do basically everything on the search page to populate it with data.

*** Team Profile

**** Show roster :ben:

  - [ ] Wire in team profile

*** Leaderboards

**** make modular :ben:
  It occurs that the leaderboard is going to be a thing in more than one place and context.  
  There may be leaderboards in the following places:
  - [ ] Campaigns
  - [ ] Teams
  - [ ] Generalized (like, sitewide or on the homepage)
  because of this, it may be handy to create leaderboards as a module that can morph to the use case.


** Pruning Stuff
These things might be useless

*** content_editprofile.html

*** registration.py


*** code issues

** Notes for meeting on 12/11

*** specifics on error handling :patterns:

**** handling SQL Errors

***** no result found errors
context dependant
- return 404

***** X exists already errors

****** users
       
*** How are we calculating rank? :patterns:
This is a thing that has to do with database efficiency and I have no idea what the concerns are, much less where to begin on this problem.

++what I'm getting from watching Ian make this, are the following:
Efficient SQL == the fewest possible queries (made possible by using things like joins)

look into
sqlalchemy.func.sum()
you need to do a sum and a group_by

also, look up joins, group_by.

**** The answer
through joins and sql, as much as possible, by taking all the donation data and applying a sql thing to it to return a calculated value rather than doing the calculations in python.

*** How are we structuring the donations models - specifics :patterns:sql:
This is a major roadblock.  Once this is up like 5 different modules can continue production.

**** Where are people going to be hitting the 'donate' button?  This may help figure out the rest

***** twitch overlay
I imagine this will tie them directly to a gamer

***** navbar (detatched from signin / user / fundraiser / etc.)
This is that case that makes the argument for nullable fkeys(or some alternative)

***** gamer profile page
Straightforward

***** fundraiser page
Straightforward

***** team page?
Do they go to the team? To a user who's on the team? Is that chosen randomly? Distributed?  Do we do this at all?

**** what are donations going to be required to be tied to?

***** gamers

***** shelters / beneficiaries
Are we going to accept "general purpose" donations that get distributed accross the network?
Is every donation going to be tied to a particular beneficiary?
-this seems like it might add clicks between people and giving us money

***** teams?  or just teams via gamers?
are donations going to be associated directly with a team or does that have to go through a gamer?
-my thoughts on this are that direct team association adds a layer of complexity that's totally unnecessary
-if we want to do this (and splitting the credit for a donation is a thing) we could autodistribute credit throughout the team.  That said, splitting donation credit is going to make things like rank calculation a royal pain in the ass.

***** fundraisers?
are donations always going to be part of a fundraiser?
 
*** Is the class-based pattern present in search.py the way to go? :patterns:
No.
**** marginally taken care of
take a look at what Ian put in for the search page - this may reveal some patterns that can be used instead 
*** how are we going to implement logging? :study:modules:
I basically just need to be pointed in the right direction for this.  If you have any wisdom on things to look out for or patterns to use throw those in the mix, too.

he put some stuff in app.py in __init__() that might be good to look at.

**** Answer
Structlog
*** Where / how are we going to serve up user-uploaded static assets (like avatars)? :patterns:modules:
I need to know both what (we are going to use for upload) and how (we are going to store them)
**** worry about it later
*** What should I be reading up on re: password hashing and salting and such? :study:modules:
    
**** Is there a specific library we're going to use? 

python
maybe flask
**** Answered
do this
https://pythonprogramming.net/password-hashing-flask-tutorial/

*** Second Priority Stuff

**** Is there a good place to put database population / teardown for testing the site manually?

**** Is there a pattern for autogenerating testing data so we have a large amount of things to test against?
I ask because when it comes to testing the site for readability and composition later it would be useful to see, for example, a search page with many hits.

**** Design Thoughts

***** How are we going to serve up the news?

****** Is it going to be searchable / sortable?

****** Are we going to serve up a featured article?

****** I assume we're going to show the latest news.  How many articles do we want by default?
*** My notes
**** what is flask request.url_rule?
**** passing -debug to python -m yadda/app.py detects changes
**** take a look at the new news module and implement those patterns sitewide (where applicable)
**** fixtures.py is the new testing_data.py
**** study joins
**** look up sql alias and sqlalchemy alias
***** .label?
**** On process
***** Look for the thing that actually works best.  
there seems to be a thing that does the thing you want usually in one of the libraries implemented, it's just a matter of finding the correct lib and searching the correct term

Notably, when Ian is doing this he seems to jump around a lot.  I'm not sure exactly what it is he's always looking for (that may just be an instinctual experience type of thing)

One thing that I could do to be better at this is getting my keyboard movement down a little better.  Switching between tabs and processes should take no time at all.
*** TO DO
**** DONE set up structlog 
**** DONE set all the text on the site to the generic text module
**** TODO implement modals for login
**** TODO Implement user avatars sitewide
**** DONE Wire up leaderboard
**** DONE Implement a logout
**** MINOR FIXES
***** DONE get rid of submit button on user profile when not in edit mode
***** 

* Next Meeting

** What was the external module for donations?
I want to start work on this, not necessarily finish it, unless that's a completely trivial task.
I'm assuming it's not.
** Structlog is implemented in it's most basic form.
I don't really get what the hell is going on, but it seems to work.
** If we can structure fundraisers today there are a few more modules I can do deep work on.
** I could really use a little high-level look at the tbd.
